service: ecom-service

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}

custom:
  vpc:
    cidrBlock: "10.0.0.0/16"
  subnets:
    public1: "10.0.1.0/24"
    public2: "10.0.2.0/24"
    private1: "10.0.3.0/24"
    private2: "10.0.4.0/24"

resources:
  Resources:
    # VPC
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: ${self:custom.vpc.cidrBlock}
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-vpc

    # Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-igw

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    # Public Subnets
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: ${self:custom.subnets.public1}
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: ${self:custom.subnets.public2}
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-2

    # Private Subnets
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: ${self:custom.subnets.private1}
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: ${self:custom.subnets.private2}
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-2

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-rt

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

    # Security Groups
    EC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for EC2 instance
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-ec2-sg

    RDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS instance
        VpcId: !Ref VPC
        SecurityGroupIngress: []
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-rds-sg

    # RDS Subnet Group
    RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-rds-subnet-group

    # RDS Instance
    RDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}-db
        DBInstanceClass: db.t3.micro
        Engine: mysql
        EngineVersion: '8.0'
        MasterUsername: ecom_user
        MasterUserPassword: ${env:DB_PASSWORD}
        AllocatedStorage: 20
        DBName: ecommerce_db
        VPCSecurityGroups:
          - !Ref RDSSecurityGroup
        DBSubnetGroupName: !Ref RDSSubnetGroup
        BackupRetentionPeriod: 7
        MultiAZ: false
        PubliclyAccessible: false
        StorageType: gp2
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-rds

    # EC2 Key Pair
    EC2KeyPair:
      Type: AWS::EC2::KeyPair
      Properties:
        KeyName: ${self:service}-${self:provider.stage}-key

    # IAM Role for EC2
    EC2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref EC2Role

    # EC2 Instance
    EC2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
        InstanceType: t3.micro
        KeyName: !Ref EC2KeyPair
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        SubnetId: !Ref PublicSubnet1
        IamInstanceProfile: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git mysql
            
            # Install Node.js 16 from NodeSource
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            
            # Install PM2
            npm install -g pm2
            
            # Create app directory and set permissions
            mkdir -p /opt/ecom-service
            chown ec2-user:ec2-user /opt/ecom-service
            cd /opt/ecom-service
            
            # Set environment variables
            cat > .env << EOF
            NODE_ENV=production
            PORT=3000
            DB_HOST=${RDSInstance.Endpoint.Address}
            DB_PORT=3306
            DB_USER=ecom_user
            DB_PASSWORD=${env:DB_PASSWORD}
            DB_NAME=ecommerce_db
            NEW_RELIC_LICENSE_KEY=${env:NEWRELIC_KEY}
            NEW_RELIC_APP_NAME=ecommerce-api-${self:provider.stage}
            NEW_RELIC_LOG_LEVEL=info
            LOG_LEVEL=info
            EOF
            
            chown ec2-user:ec2-user .env
            
            # Create systemd service for the app
            cat > /etc/systemd/system/ecom-service.service << EOF
            [Unit]
            Description=E-commerce Service
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/ecom-service
            ExecStart=/usr/bin/node index.js
            Restart=always
            RestartSec=10
            Environment=NODE_ENV=production
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Wait for RDS to be available
            echo "Waiting for RDS to be available..."
            while ! mysqladmin ping -h ${RDSInstance.Endpoint.Address} -u ecom_user -p${env:DB_PASSWORD} --silent; do
                sleep 10
            done
            
            echo "RDS is ready. EC2 setup complete. Deploy your app using deploy-app.sh"
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-ec2



  Outputs:
    VPCId:
      Description: VPC ID
      Value: !Ref VPC
      Export:
        Name: ${self:service}-${self:provider.stage}-vpc-id

    EC2InstanceId:
      Description: EC2 Instance ID
      Value: !Ref EC2Instance
      Export:
        Name: ${self:service}-${self:provider.stage}-ec2-id

    EC2PublicIP:
      Description: EC2 Public IP
      Value: !GetAtt EC2Instance.PublicIp
      Export:
        Name: ${self:service}-${self:provider.stage}-ec2-public-ip

    RDSEndpoint:
      Description: RDS Endpoint
      Value: !GetAtt RDSInstance.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-rds-endpoint

    ApplicationURL:
      Description: Application URL
      Value: !Sub "http://${EC2Instance.PublicIp}:3000"